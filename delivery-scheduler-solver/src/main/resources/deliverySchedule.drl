package pocs.optaplanner.delivery

import pocs.optaplanner.delivery.deliveries.DeliveryAssignment;
import pocs.optaplanner.delivery.aircrew.Aircrew;
import pocs.optaplanner.delivery.aircrew.AircrewAvailability;
import pocs.optaplanner.delivery.aircrew.AircrewAvailabilityState;

import pocs.optaplanner.delivery.DateTimeUtils;

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

global HardMediumSoftScoreHolder scoreHolder;


// ############################################################################
// Hard constraints
// ############################################################################

rule "Required Skill for a Delivery Assignment"
    when
        DeliveryAssignment(
                aircrew != null,
                !getAircrew().hasSkills(getDeliveryRole().getRequiredSkillSet()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Aircrew cannot Act as Multiple Roles For Same Delivery"
	when
		DeliveryAssignment(
			$n : name,
			$dr : deliveryRole,
			$a : aircrew != null
		)
		DeliveryAssignment(
			name == $n,
			deliveryRole != $dr,
			aircrew == $a
		)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -80);
end

rule "Aircrew Unavailable for Delivery Assignment"
	when
		AircrewAvailability(
			state == AircrewAvailabilityState.UNAVAILABLE,
			$a : aircrew,
			$startTime : startTime,
			$endTime : endTime
		)
		DeliveryAssignment(
			aircrew == $a,
			DateTimeUtils.doTimeslotsIntersect($startTime,$endTime,
												startTime, endTime)
		)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -50);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "Assign every Delivery Assignment"
    when
        DeliveryAssignment(aircrew == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end
